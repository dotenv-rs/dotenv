jobs:
- job: ${{ parameters.name }}
  pool: ${{ parameters.poolName }}
  strategy:
    matrix:
      nightly:
        RUSTUP_TOOLCHAIN: nightly
      beta:
        RUSTUP_TOOLCHAIN: beta
      stable:
        RUSTUP_TOOLCHAIN: stable
  steps:
  - ${{ if ne(parameters.name, 'Windows') }}:
    # Linux and macOS.
    - script: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: Install rust
  - ${{ if eq(parameters.name, 'Windows') }}:
    # Windows.
    - script: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
        set PATH=%PATH%;%USERPROFILE%\.cargo\bin
        echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
      displayName: Install rust (windows)
  # All platforms.
  - script: |
        rustc -Vv
        cargo -V
        echo $RUSTUP_TOOLCHAIN
    displayName: Query rust and cargo versions
  - script: |
        sudo apt-get update
        sudo apt-get install cmake g++ pkg-config jq
        sudo apt-get install libcurl4-openssl-dev libelf-dev libdw-dev binutils-dev libiberty-dev
        cargo install cargo-kcov
        cargo kcov --print-install-kcov-sh | sh
    displayName: Install kcov
    condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.JobName'], 'Linux stable'))
  - script: cargo install --git https://github.com/dgriffen/cargo-junit --branch temp-patch
    displayName: Install cargo junit formatter
  - script: cargo build
    displayName: Build
  - script: cargo junit --name testResults.xml
    displayName: Build and run tests
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/testResults.xml' 
      testRunTitle: $(Agent.JobName) tests
  - script: |
        mkdir coverageReport
        cargo kcov -o coverageReport --all
        cd coverageReport/kcov-merged
        python ../../azure-pipelines/fix_coverage_for_cobertura.py
    displayName: Run code coverage
    condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.JobName'], 'Linux stable'))
  - script: bash <(curl -s https://codecov.io/bash)
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN_SECRET)
    displayName: Publish to codecov.io
    condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.JobName'], 'Linux stable'))
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverageReport/kcov-merged/cobertura.xml
    condition: and(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.JobName'], 'Linux stable'))
